import { IImage } from "../schemas/image.schema";
import { ImageRepository } from "../database/repositories/image.repository";


export class ImageService {
    private imageRepository: ImageRepository;

    constructor() {
        this.imageRepository = new ImageRepository();
    }

    async uploadImage(file: Express.Multer.File): Promise<IImage> {
        console.log('Service: Received file:', file);
        console.log('Service: Generated filename:', file.filename);  // Log the filename
    
        if (!file) {
            throw new Error("File is missing in service");
        }
    
        // Manually construct the file path using the filename
        const filePath = `/uploads/${file.filename}`;  // Use the file.filename generated by Multer
    
        const imageData: Partial<IImage> = {
            filename: file.originalname,  // Original name of the file
            path: filePath,  // Constructed path for where the file is stored
            mimetype: file.mimetype,  // MIME type of the file
        };
    
        console.log('Service: Image metadata to be saved:', imageData);
    
        return this.imageRepository.saveImage(imageData);  // Save metadata only
    }
    
    
    
}

export default new ImageService();
